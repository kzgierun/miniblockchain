import hashlib
import datetime


class Block:
    def __init__(self, index, time, data, previoushash):
        self.index = index
        self.time = time
        self.data = data
        self.previoushash = previoushash
        self.hash = self.hashblock()

    def hashblock(self):
        sha = hashlib.sha256()
        sha.update(str(self.index).encode('utf-8') + str(self.time).encode('utf-8') +
                   str(self.data).encode('utf-8') + str(self.previoushash).encode('utf-8'))
        return sha.hexdigest()

def genesis():
        return Block(0, datetime.datetime.now(), "genesis", "0")

def nextblock(previousblock):
        this_index = previousblock.index + 1
        this_time = datetime.datetime.now()
        this_data = 'BLOCK #' + str(this_index)
        this_hash = previousblock.hash
        return Block(this_index, this_time, this_data, this_hash)


blockchain = [genesis()]
previousblock = blockchain[0]
blockchainlength = int(input("Enter the length of a blockchain."))

for i in range(0, blockchainlength):
    blockadded = nextblock(previousblock)
    blockchain.append(blockadded)
    previousblock = blockadded

    print("Block #{} has been created".format(blockadded.index))
    print("Hash: {}\n".format(blockadded.hash))

    f = open("doc.txt", "a")
    f.write(blockadded.hash)
    f.write("\n")
    f.close()
